# https://taskfile.dev

version: "3"

env:
  VERBOSE: "false"
  BRANCH:
    sh: "git rev-parse --abbrev-ref HEAD| cut -d / -f2"
  BENCH_RESULTS_DIR: "./benchs"

tasks:
  lint:
    cmds:
      - golangci-lint run --fix --allow-parallel-runners --config ./../../.golangci.yml

  tests:
    cmds:
      - >
        go test -failfast -coverpkg ./... -coverprofile coverage.out -covermode atomic ./... |
        sed ''/PASS/s//$(printf "\033[32mPASS\033[0m")/'' |
        sed ''/FAIL/s//$(printf "\033[31mFAIL\033[0m")/'' |
        sed ''/RUN/s//$(printf "\033[34mRUN\033[0m")/''

  print:coverage:
    cmds:
      - go tool cover -html=coverage.out -o coverage.html
      - cov-report ./coverage.out
      - echo "To open the html coverage file, use one of the following commands:"
      - echo "open coverage.html on mac"
      - echo "xdg-open coverage.html on linux"
    silent: true

  libs/sync:
    cmds:
      - rm -rf ./libs/*
      - cp -R ./../../libs/go-libs/* ./libs/

  bench:
    internal: true
    cmds:
      - mkdir -p {{.BENCH_RESULTS_DIR}}
      - >
        go test -run BenchmarkParallelWrites -bench=. {{if eq .VERBOSE "true"}}-v{{end}}
        -test.benchmem
        -timeout 1h
        -memprofile {{.BENCH_RESULTS_DIR}}/{{.BRANCH}}-memprofile-{{if eq .ASYNC "true"}}async{{else}}sync{{end}}.out
        -cpuprofile {{.BENCH_RESULTS_DIR}}/{{.BRANCH}}-profile-{{if eq .ASYNC "true"}}async{{else}}sync{{end}}.out
        -benchtime={{if .DURATION}}{{.DURATION}}{{else}}15s{{end}}
        {{if eq .RACE "true"}}-race{{end}}
        -count={{if .COUNT}}{{.COUNT}}{{else}}10{{end}} ./benchmarks | tee {{.BENCH_RESULTS_DIR}}/{{.BRANCH}}-{{if eq .ASYNC "true"}}async{{else}}sync{{end}}.stats
    env:
      ASYNC: "{{.ASYNC}}"
      GOMEMLIMIT: 1GiB
      GOMAXPROCS: 2
      VERBOSE: false
#      GOGC: "1000" # https://dave.cheney.net/tag/gogc
      CGO_ENABLED: 0
#      GODEBUG: gctrace=1 #,gcpacertrace=1

  bench:async:
    cmds:
    - task: bench
      vars:
        ASYNC: true

  bench:sync:
    cmds:
    - task: bench

  bench:both:
    cmds:
    - task: bench:sync
    - task: bench:async

  bench:diff:
    internal: true
    cmds:
    - >
      benchstat {{.BENCH_RESULTS_DIR}}/{{if .SOURCE}}{{.SOURCE}}{{else}}main{{end}}-{{if eq .ASYNC "true"}}async{{else}}sync{{end}}.stats
      {{.BENCH_RESULTS_DIR}}/{{.BRANCH}}-{{if eq .ASYNC "true"}}async{{else}}sync{{end}}.stats

  bench:diff:sync:
    cmds:
    - task: bench:diff

  bench:diff:async:
    cmds:
    - task: bench:diff
      vars:
        ASYNC: "true"

  bench:diff:both:
    cmds:
    - task: bench:diff:sync
    - task: bench:diff:async

  bench:pprof:
    internal: true
    cmds:
    - go tool pprof -http=":" {{.BENCH_RESULTS_DIR}}/{{.BRANCH}}-{{.KIND}}-{{if eq .ASYNC "true"}}async{{else}}sync{{end}}.out

  bench:cpu:pprof:
    internal: true
    cmds:
    - task: bench:pprof
      vars:
        KIND: profile
        ASYNC: "{{.ASYNC}}"

  bench:mem:pprof:
    internal: true
    cmds:
    - task: bench:pprof
      vars:
        KIND: memprofile
        ASYNC: "{{.ASYNC}}"

  bench:cpu:pprof:async:
    cmds:
    - task: bench:cpu:pprof
      vars:
        ASYNC: "true"

  bench:cpu:pprof:sync:
    cmds:
    - task: bench:cpu:pprof
      vars:
        ASYNC: "false"

  bench:mem:pprof:async:
    cmds:
    - task: bench:mem:pprof
      vars:
        ASYNC: "true"

  bench:mem:pprof:sync:
    cmds:
    - task: bench:mem:pprof
      vars:
        ASYNC: "false"

  sdk:template:
    desc: Extract templates
    dir: ./sdk
    preconditions:
      - sh: '[ "{{.CLI_ARGS}}" != "" ]'
        msg: Please specify generator as first cli arg (ie "task template -- go")
    cmds:
      - >
        docker run --rm -w /local -v ${PWD}:/local openapitools/openapi-generator-cli:v6.6.0 author
        template -g {{.CLI_ARGS}} -o templates/{{.CLI_ARGS}}

  sdk:generate:
    desc: Generate client code
    dir: ./sdk
    preconditions:
      - sh: '[ "{{.CLI_ARGS}}" != "" ]'
        msg: Please specify generator as first cli arg (ie "task generate -- go")
    cmds:
      - wget https://raw.githubusercontent.com/formancehq/ledger/{{.VERSION}}/pkg/api/controllers/swagger.yaml -O swagger.yaml
      - sed -i -e "s/LEDGER_VERSION/{{.VERSION}}/g" swagger.yaml
      - >
        docker run --rm -w /local -v ${PWD}:/local openapitools/openapi-generator-cli:v6.6.0 generate
        -i ./swagger.yaml
        -g {{ (split "-" .CLI_ARGS)._0 }}
        -c ./configs/{{.CLI_ARGS}}.yaml
        -o ./sdks/{{.CLI_ARGS}}
        --git-user-id=formancehq
        --git-repo-id=formance-sdk-{{.CLI_ARGS}}
        -p packageVersion={{.VERSION}}

  goreleaser:test:pkg:
    desc: Test a package
    cmds:
      - docker run --platform linux/{{.Platform}} --rm --workdir /tmp -v $PWD/dist:/tmp {{.Image}} sh -c '{{.Cmd}} && goreleaser --version'

  goreleaser:test:rpm:
    desc: Tests rpm packages
    vars:
      rpm: "rpm --nodeps -ivh"
    cmds:
      - task: goreleaser:test:pkg
        vars:
          Platform: "amd64"
          Image: fedora
          Cmd: "{{.rpm}} *_linux_amd64.rpm"
      - task: goreleaser:test:pkg
        vars:
          Platform: "arm64"
          Image: fedora
          Cmd: "{{.rpm}} *_linux_arm64.rpm"

  goreleaser:test:deb:
    desc: Tests deb packages
    vars:
      dpkg: "dpkg --ignore-depends=git -i"
    cmds:
      - task: goreleaser:test:pkg
        vars:
          Platform: "amd64"
          Image: ubuntu
          Cmd: "{{.dpkg}} *_linux_amd64.deb"
      - task: goreleaser:test:pkg
        vars:
          Platform: "arm64"
          Image: ubuntu
          Cmd: "{{.dpkg}} *_linux_arm64.deb"
