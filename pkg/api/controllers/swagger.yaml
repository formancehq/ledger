openapi: 3.0.3
info:
  title: Ledger API
  contact: {}
  version: "LEDGER_VERSION"

servers:
- url: https://{organization}.o.numary.cloud/ledger
  description: Production server
  variables:
    organization:
      description: The organization on which the ledger is located
      default: ""

paths:
  /_info:
    get:
      tags:
        - server
      summary: Show server information.
      operationId: getInfo
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigInfoResponse'

  /{ledger}/accounts:
    head:
      summary: Count the accounts from a ledger.
      operationId: countAccounts
      tags:
      - accounts
      parameters:
      - name: ledger
        in: path
        description: Name of the ledger.
        required: true
        schema:
          type: string
          example: ledger001
      - name: address
        in: query
        description: Filter accounts by address pattern (regular expression placed between ^ and $).
        schema:
          type: string
          example: users:.+
      - name: metadata
        in: query
        description: Filter accounts by metadata key value pairs. Nested objects can be used as seen in the example below.
        style: deepObject
        explode: true
        schema:
          type: object
          properties: {}
        example: metadata[key]=value1&metadata[a.nested.key]=value2
      responses:
        "200":
          description: OK
          headers:
            Count:
              schema:
                type: integer
    get:
      summary: List accounts from a ledger.
      description: List accounts from a ledger, sorted by address in descending order.
      operationId: listAccounts
      tags:
        - accounts
      parameters:
        - name: ledger
          in: path
          description: Name of the ledger.
          required: true
          schema:
            type: string
            example: ledger001
        - name: page_size
          in: query
          description: 'The maximum number of results to return per page'
          example: 100
          schema:
            type: integer
            maximum: 1000
            minimum: 1
            default: 15
        - name: after
          in: query
          description: Pagination cursor, will return accounts after given address, in descending order.
          schema:
            type: string
            example: users:003
        - name: address
          in: query
          description: Filter accounts by address pattern (regular expression placed between ^ and $).
          schema:
            type: string
            example: users:.+
        - name: metadata
          in: query
          description: Filter accounts by metadata key value pairs. Nested objects can be used as seen in the example below.
          style: deepObject
          explode: true
          schema:
            type: object
            properties: {}
          example: metadata[key]=value1&metadata[a.nested.key]=value2
        - name: balance
          in: query
          description: Filter accounts by their balance (default operator is gte)
          schema:
            type: integer
            format: int64
            example: 2400
        - name: balance_operator
          in: query
          description: Operator used for the filtering of balances can be greater than/equal, less than/equal, greater than, less than, or equal
          schema:
            type: string
            enum: [gte, lte, gt, lt, e]
            example: gte
        - name: pagination_token
          in: query
          description: |
            Parameter used in pagination requests. Maximum page size is set to 15.
            Set to the value of next for the next page of results. 
            Set to the value of previous for the previous page of results.
            No other parameters can be set when the pagination token is set.
          schema:
            type: string
            example: aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                required:
                  - cursor
                properties:
                  cursor:
                    allOf:
                      - $ref: '#/components/schemas/Cursor'
                      - properties:
                          data:
                            items:
                              $ref: '#/components/schemas/Account'
                            type: array
                        type: object
                        required:
                          - data
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - error_code
                properties:
                  error_code:
                    type: string
                    example: "VALIDATION"
                  error_message:
                    type: string
                    example: "no other query params can be set with 'pagination_token'"

  /{ledger}/accounts/{address}:
    get:
      summary: Get account by its address.
      operationId: getAccount
      tags:
        - accounts
      parameters:
        - name: ledger
          in: path
          description: Name of the ledger.
          required: true
          schema:
            type: string
            example: ledger001
        - name: address
          in: path
          description: |
            Exact address of the account. It must match the following regular expressions pattern:
            ```
            ^\w+(:\w+)*$
            ```
          required: true
          schema:
            type: string
            example: users:001
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/AccountWithVolumesAndBalances'
                type: object
                required:
                  - data
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - error_code
                properties:
                  error_code:
                    type: string
                    example: "VALIDATION"
                  error_message:
                    type: string
                    example: "invalid account address format"


  /{ledger}/accounts/{address}/metadata:
    post:
      summary: Add metadata to an account.
      operationId: addMetadataToAccount
      tags:
        - accounts
      parameters:
        - name: ledger
          in: path
          description: Name of the ledger.
          required: true
          schema:
            type: string
            example: ledger001
        - name: address
          in: path
          description: |
            Exact address of the account. It must match the following regular expressions pattern:
            ```
            ^\w+(:\w+)*$
            ```
          required: true
          schema:
            type: string
            example: users:001
      requestBody:
        description: metadata
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
        required: true
      responses:
        "204":
          description: No Content
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - error_code
                properties:
                  error_code:
                    type: string
                    example: "VALIDATION"
                  error_message:
                    type: string
                    example: "invalid account address format"

  /{ledger}/mapping:
    get:
      tags:
        - mapping
      operationId: getMapping
      summary: Get the mapping of a ledger.
      parameters:
        - name: ledger
          in: path
          description: Name of the ledger.
          required: true
          schema:
            type: string
            example: ledger001
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingResponse'
    put:
      tags:
        - mapping
      operationId: updateMapping
      summary: Update the mapping of a ledger.
      parameters:
        - name: ledger
          in: path
          description: Name of the ledger.
          required: true
          schema:
            type: string
            example: ledger001
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Mapping'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingResponse'
      
  /{ledger}/script:
    post:
      tags:
        - script
      operationId: runScript
      summary: Execute a Numscript.
      parameters:
        - name: ledger
          in: path
          description: Name of the ledger.
          required: true
          schema:
            type: string
            example: ledger001
        - name: preview
          in: query
          description: Set the preview mode. Preview mode doesn't add the logs to the database or publish a message to the message broker.
          schema:
            type: boolean
            example: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Script'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptResult'
      
  /{ledger}/stats:
    get:
      tags:
        - stats
      operationId: readStats
      summary: Get Stats
      description: |
        Get ledger stats (aggregate metrics on accounts and transactions)
        The stats for account
      parameters:
        - name: ledger
          in: path
          description: name of the ledger
          required: true
          schema:
            type: string
            example: ledger001
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsResponse'

  /{ledger}/transactions:
    head:
      tags:
      - transactions
      summary: Count the transactions from a ledger.
      operationId: countTransactions
      parameters:
      - name: ledger
        in: path
        description: Name of the ledger.
        required: true
        schema:
          type: string
          example: ledger001
      - name: reference
        in: query
        description: Filter transactions by reference field.
        schema:
          type: string
          example: ref:001
      - name: account
        in: query
        description: Filter transactions with postings involving given account, either
          as source or destination (regular expression placed between ^ and $).
        schema:
          type: string
          example: users:001
      - name: source
        in: query
        description: Filter transactions with postings involving given account at source (regular expression placed between ^ and $).
        schema:
          type: string
          example: users:001
      - name: destination
        in: query
        description: Filter transactions with postings involving given account at destination (regular expression placed between ^ and $).
        schema:
          type: string
          example: users:001
      - name: metadata
        in: query
        description: Filter transactions by metadata key value pairs. Nested objects can be used as seen in the example below.
        style: deepObject
        explode: true
        schema:
          type: object
          properties: { }
        example: metadata[key]=value1&metadata[a.nested.key]=value2
      responses:
        "200":
          description: OK
          headers:
            Count:
              schema:
                type: integer
    get:
      tags:
        - transactions
      summary: List transactions from a ledger.
      description: List transactions from a ledger, sorted by txid in descending order.
      operationId: listTransactions
      parameters:
        - name: ledger
          in: path
          description: Name of the ledger.
          required: true
          schema:
            type: string
            example: ledger001
        - name: page_size
          in: query
          description: 'The maximum number of results to return per page'
          example: 100
          schema:
            type: integer
            maximum: 1000
            minimum: 1
            default: 15
        - name: after
          in: query
          description: Pagination cursor, will return transactions after given txid
            (in descending order).
          schema:
            type: string
            example: 1234
        - name: reference
          in: query
          description: Find transactions by reference field.
          schema:
            type: string
            example: ref:001
        - name: account
          in: query
          description: Find transactions with postings involving given account, either
            as source or destination.
          schema:
            type: string
            example: users:001
        - name: source
          in: query
          description: Find transactions with postings involving given account at source.
          schema:
            type: string
            example: users:001
        - name: destination
          in: query
          description: Find transactions with postings involving given account at destination.
          schema:
            type: string
            example: users:001
        - name: start_time
          in: query
          description: |
            Filter transactions that occurred after this timestamp.
            The format is RFC3339 and is inclusive (for example, 12:00:01 includes the first second of the minute).
          schema:
            type: string
            example:
        - name: end_time
          in: query
          description: |
            Filter transactions that occurred before this timestamp.
            The format is RFC3339 and is exclusive (for example, 12:00:01 excludes the first second of the minute).
          schema:
            type: string
        - name: pagination_token
          in: query
          description: |
            Parameter used in pagination requests. Maximum page size is set to 15.
            Set to the value of next for the next page of results. 
            Set to the value of previous for the previous page of results.
            No other parameters can be set when the pagination token is set.
          schema:
            type: string
            example: aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==
        - name: metadata
          in: query
          description: Filter transactions by metadata key value pairs. Nested objects can be used as seen in the example below.
          style: deepObject
          explode: true
          schema:
            type: object
            properties: { }
          example: metadata[key]=value1&metadata[a.nested.key]=value2
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - cursor
                properties:
                  cursor:
                    allOf:
                      - $ref: '#/components/schemas/Cursor'
                      - type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/Transaction'
                        required:
                          - data
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - error_code
                properties:
                  error_code:
                    type: string
                    example: "VALIDATION"
                  error_message:
                    type: string
                    example: "no other query params can be set with 'pagination_token'"
    post:
      tags:
        - transactions
      summary: Create a new transaction to a ledger.
      operationId: createTransaction
      parameters:
        - name: ledger
          in: path
          description: Name of the ledger.
          required: true
          schema:
            type: string
            example: ledger001
        - name: preview
          in: query
          description: Set the preview mode. Preview mode doesn't add the logs to the database or publish a message to the message broker.
          schema:
            type: boolean
            example: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionData'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
        "304":
          description: Not modified (when preview is enabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - error_code
                properties:
                  error_code:
                    type: string
                    example: "VALIDATION"
                  error_message:
                    type: string
                    example: "transaction has no postings"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                required:
                  - error_code
                properties:
                  error_code:
                    type: string
                    example: "CONFLICT"
                  error_message:
                    type: string
                    example: "conflict error on reference"

  /{ledger}/transactions/{txid}:
    get:
      tags:
        - transactions
      summary: Get transaction from a ledger by its ID.
      operationId: getTransaction
      parameters:
        - name: ledger
          in: path
          description: Name of the ledger.
          required: true
          schema:
            type: string
            example: ledger001
        - name: txid
          in: path
          description: Transaction ID.
          required: true
          schema:
            type: integer
            example: 1234
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - error_code
                properties:
                  error_code:
                    type: string
                    example: "VALIDATION"
                  error_message:
                    type: string
                    example: "invalid transaction ID"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - error_code
                properties:
                  error_code:
                    type: string
                    example: "NOT_FOUND"
                  error_message:
                    type: string
                    example: "transaction not found"

  /{ledger}/transactions/{txid}/metadata:
    post:
      tags:
        - transactions
      summary: Set the metadata of a transaction by its ID.
      operationId: addMetadataOnTransaction
      parameters:
        - name: ledger
          in: path
          description: Name of the ledger.
          required: true
          schema:
            type: string
            example: ledger001
        - name: txid
          in: path
          description: Transaction ID.
          required: true
          schema:
            type: integer
            example: 1234
      requestBody:
        description: metadata
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      responses:
        "204":
          description: No Content
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - error_code
                properties:
                  error_code:
                    type: string
                    example: "VALIDATION"
                  error_message:
                    type: string
                    example: "invalid transaction ID"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - error_code
                properties:
                  error_code:
                    type: string
                    example: "NOT_FOUND"
                  error_message:
                    type: string
                    example: "transaction not found"

  /{ledger}/transactions/{txid}/revert:
    post:
      tags:
        - transactions
      operationId: revertTransaction
      summary: Revert a ledger transaction by its ID.
      parameters:
        - name: ledger
          in: path
          description: Name of the ledger.
          required: true
          schema:
            type: string
            example: ledger001
        - name: txid
          in: path
          description: Transaction ID.
          required: true
          schema:
            type: integer
            example: 1234
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - error_code
                properties:
                  error_code:
                    type: string
                    example: "VALIDATION"
                  error_message:
                    type: string
                    example: "invalid transaction ID"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - error_code
                properties:
                  error_code:
                    type: string
                    example: "NOT_FOUND"
                  error_message:
                    type: string
                    example: "transaction not found"

  /{ledger}/transactions/batch:
    post:
      tags:
        - transactions
      summary: Create a new batch of transactions to a ledger.
      operationId: CreateTransactions
      parameters:
        - name: ledger
          in: path
          description: Name of the ledger.
          required: true
          schema:
            type: string
            example: ledger001
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transactions'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - error_code
                properties:
                  error_code:
                    type: string
                    example: "VALIDATION"
                  error_message:
                    type: string
                    example: "invalid transactions format"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                required:
                  - error_code
                properties:
                  error_code:
                    type: string
                    example: "CONFLICT"
                  error_message:
                    type: string
                    example: "conflict error on reference"

  /{ledger}/balances:
    get:
      tags:
        - balances
      summary: Get the balances from a ledger's account
      operationId: getBalances
      parameters:
        - name: ledger
          in: path
          description: Name of the ledger.
          required: true
          schema:
            type: string
            example: ledger001
        - name: address
          in: query
          description: Filter balances involving given account, either
            as source or destination.
          schema:
            type: string
            example: users:001
        - name: after
          in: query
          description: Pagination cursor, will return accounts after given address, in descending order.
          schema:
            type: string
            example: users:003
        - name: pagination_token
          in: query
          description: |-
            Parameter used in pagination requests. 
            Set to the value of next for the next page of results. 
            Set to the value of previous for the previous page of results.
          schema:
            type: string
            example: aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - cursor
                properties:
                  cursor:
                    allOf:
                      - $ref: '#/components/schemas/Cursor'
                      - type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/AccountsBalances'
                        required:
                          - data

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - error_code
                properties:
                  error_code:
                    type: string
                    example: "VALIDATION"
                  error_message:
                    type: string
                    example: "no other query params can be set with 'pagination_token'"

  /{ledger}/aggregate/balances:
    get:
      tags:
        - balances
      summary: Get the aggregated balances from selected accounts
      operationId: getBalancesAggregated
      parameters:
        - name: ledger
          in: path
          description: Name of the ledger.
          required: true
          schema:
            type: string
            example: ledger001
        - name: address
          in: query
          description: Filter balances involving given account, either
            as source or destination.
          schema:
            type: string
            example: users:001
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssetsBalances'
                required:
                  - data
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - error_code
                properties:
                  error_code:
                    type: string
                    example: "VALIDATION"
                  error_message:
                    type: string
                    example: "invalid address"

security:
  - basicAuth: []

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    Config:
      type: object
      properties:
        storage:
          $ref: '#/components/schemas/LedgerStorage'
      required:
        - storage
    Metadata:
      type: object
      nullable: true
      additionalProperties: {}
      example: { admin: true, a: { nested: { key: value}} }
    ConfigInfo:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/Config'
        server:
          type: string
        version:
          type: string
      required:
        - config
        - server
        - version
    LedgerStorage:
      type: object
      properties:
        driver:
          type: string
        ledgers:
          type: array
          items:
            type: string
      required:
        - driver
        - ledgers
    ScriptResult:
      type: object
      properties:
        details:
          type: string
        error_code:
          type: string
          enum:
            - INTERNAL
            - INSUFFICIENT_FUND
            - COMPILATION_FAILED
            - NO_SCRIPT
        error_message:
          type: string
        transaction:
          $ref: '#/components/schemas/Transaction'
    Account:
      type: object
      required:
        - address
      properties:
        address:
          type: string
          example: users:001
        type:
          type: string
          example: virtual
        metadata:
          type: object
          properties: {}
          example: { admin: true, a: { nested: { key: value}} }
    AccountWithVolumesAndBalances:
      type: object
      required:
        - address
      properties:
        address:
          type: string
          example: users:001
        type:
          type: string
          example: virtual
        metadata:
          type: object
          properties: {}
          example: { admin: true, a: { nested: { key: value}} }
        volumes:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: integer
          example: { COIN: { input: 100, output: 0 } }
        balances:
          type: object
          additionalProperties:
            type: integer
          example:
            COIN: 100

    AccountsBalances:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/AssetsBalances'
      example:
        account1:
          USD: 100
          EUR: 23
        account2:
          CAD: 20
          JPY: 21

    AssetsBalances:
      type: object
      additionalProperties:
        type: integer
      example:
        USD: 100
        EUR: 12

    Contract:
      type: object
      properties:
        account:
          type: string
          example: users:001
        expr:
          type: object
      required:
        - accounts
        - expr
    Mapping:
      type: object
      nullable: true
      required:
        - contracts
      properties:
        contracts:
          type: array
          items:
            $ref: '#/components/schemas/Contract'
    Posting:
      type: object
      properties:
        amount:
          type: integer
          example: 100
        asset:
          type: string
          example: COIN
        destination:
          type: string
          example: users:002
        source:
          type: string
          example: users:001
      required:
        - amount
        - asset
        - destination
        - source
    Script:
      type: object
      properties:
        reference:
          type: string
          example: order_1234
          description: Reference to attach to the generated transaction
        metadata:
          $ref: '#/components/schemas/Metadata'
        plain:
          type: string
          example: "vars {\naccount $user\n}\nsend [COIN 10] (\n\tsource = @world\n\tdestination = $user\n)\n"
        vars:
          type: object
          properties: {}
          example: {
            "vars": {
              "user": "users:042"
            }
          }
      required:
        - plain
    Transaction:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        postings:
          type: array
          items:
            $ref: '#/components/schemas/Posting'
        reference:
          type: string
          example: ref:001
        metadata:
          $ref: '#/components/schemas/Metadata'
        txid:
          type: integer
        preCommitVolumes:
          $ref: '#/components/schemas/AggregatedVolumes'
        postCommitVolumes:
          $ref: '#/components/schemas/AggregatedVolumes'
      required:
        - postings
        - timestamp
        - txid
    TransactionData:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        postings:
          type: array
          items:
            $ref: '#/components/schemas/Posting'
        reference:
          type: string
          example: ref:001
        metadata:
          $ref: '#/components/schemas/Metadata'
      required:
        - postings
    Transactions:
      required:
        - transactions
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionData'
    Stats:
      type: object
      properties:
        accounts:
          type: integer
        transactions:
          type: integer
      required:
        - accounts
        - transactions
    Cursor:
      type: object
      required:
        - page_size
      properties:
        page_size:
          type: integer
          example: 1
        has_more:
          type: boolean
          example: false
        previous:
          type: string
          example: YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=
        next:
          type: string
          example: aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==

    TransactionsResponse:
      type: object
      properties:
        data:
          items:
            $ref: '#/components/schemas/Transaction'
          type: array
      required:
        - data
    TransactionResponse:
      properties:
        data:
          $ref: '#/components/schemas/Transaction'
      type: object
      required:
        - data
    StatsResponse:
      properties:
        data:
          $ref: '#/components/schemas/Stats'
      type: object
      required:
        - data
    MappingResponse:
      properties:
        data:
          $ref: '#/components/schemas/Mapping'
      type: object
    ConfigInfoResponse:
      properties:
        data:
          $ref: '#/components/schemas/ConfigInfo'
      type: object
      required:
        - data
    Volume:
      type: object
      properties:
        input:
          type: number
        output:
          type: number
        balance:
          type: number
      required:
      - input
      - output
      example:
        input: 100
        output: 20
        balance: 80
    Volumes:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Volume'
      example:
        USD:
          input: 100
          output: 10
          balance: 90
        EUR:
          input: 100
          output: 10
          balance: 90
    AggregatedVolumes:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Volumes'
      example:
        "orders:1":
          "USD":
            input: 100
            output: 10
            balance: 90
        "orders:2":
          "USD":
            input: 100
            output: 10
            balance: 90
    ErrorCode:
      type: string
      enum:
        - INTERNAL
        - INSUFFICIENT_FUND
        - VALIDATION
        - CONFLICT
    ErrorResponse:
      type: object
      required:
        - error_code
      properties:
        error_code:
          $ref: '#/components/schemas/ErrorCode'
        error_message:
          type: string
          example: internal error
