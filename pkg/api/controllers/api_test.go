// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package controllers_test is a generated GoMock package.
package controllers_test

import (
	context "context"
	reflect "reflect"

	controllers "github.com/formancehq/ledger/pkg/api/controllers"
	core "github.com/formancehq/ledger/pkg/core"
	ledger "github.com/formancehq/ledger/pkg/ledger"
	storage "github.com/formancehq/ledger/pkg/storage"
	api "github.com/formancehq/stack/libs/go-libs/api"
	metadata "github.com/formancehq/stack/libs/go-libs/metadata"
	gomock "github.com/golang/mock/gomock"
)

// MockLedger is a mock of Ledger interface.
type MockLedger struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerMockRecorder
}

// MockLedgerMockRecorder is the mock recorder for MockLedger.
type MockLedgerMockRecorder struct {
	mock *MockLedger
}

// NewMockLedger creates a new mock instance.
func NewMockLedger(ctrl *gomock.Controller) *MockLedger {
	mock := &MockLedger{ctrl: ctrl}
	mock.recorder = &MockLedgerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedger) EXPECT() *MockLedgerMockRecorder {
	return m.recorder
}

// CountAccounts mocks base method.
func (m *MockLedger) CountAccounts(ctx context.Context, query storage.AccountsQuery) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAccounts", ctx, query)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAccounts indicates an expected call of CountAccounts.
func (mr *MockLedgerMockRecorder) CountAccounts(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAccounts", reflect.TypeOf((*MockLedger)(nil).CountAccounts), ctx, query)
}

// CountTransactions mocks base method.
func (m *MockLedger) CountTransactions(ctx context.Context, query storage.TransactionsQuery) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTransactions", ctx, query)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTransactions indicates an expected call of CountTransactions.
func (mr *MockLedgerMockRecorder) CountTransactions(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTransactions", reflect.TypeOf((*MockLedger)(nil).CountTransactions), ctx, query)
}

// CreateTransaction mocks base method.
func (m *MockLedger) CreateTransaction(ctx context.Context, preview bool, data core.RunScript) (*core.ExpandedTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, preview, data)
	ret0, _ := ret[0].(*core.ExpandedTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockLedgerMockRecorder) CreateTransaction(ctx, preview, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockLedger)(nil).CreateTransaction), ctx, preview, data)
}

// GetAccount mocks base method.
func (m *MockLedger) GetAccount(ctx context.Context, param string) (*core.AccountWithVolumes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, param)
	ret0, _ := ret[0].(*core.AccountWithVolumes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockLedgerMockRecorder) GetAccount(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockLedger)(nil).GetAccount), ctx, param)
}

// GetAccounts mocks base method.
func (m *MockLedger) GetAccounts(ctx context.Context, query storage.AccountsQuery) (*api.Cursor[core.Account], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx, query)
	ret0, _ := ret[0].(*api.Cursor[core.Account])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockLedgerMockRecorder) GetAccounts(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockLedger)(nil).GetAccounts), ctx, query)
}

// GetBalances mocks base method.
func (m *MockLedger) GetBalances(ctx context.Context, q storage.BalancesQuery) (*api.Cursor[core.AccountsBalances], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalances", ctx, q)
	ret0, _ := ret[0].(*api.Cursor[core.AccountsBalances])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalances indicates an expected call of GetBalances.
func (mr *MockLedgerMockRecorder) GetBalances(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalances", reflect.TypeOf((*MockLedger)(nil).GetBalances), ctx, q)
}

// GetBalancesAggregated mocks base method.
func (m *MockLedger) GetBalancesAggregated(ctx context.Context, q storage.BalancesQuery) (core.AssetsBalances, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalancesAggregated", ctx, q)
	ret0, _ := ret[0].(core.AssetsBalances)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalancesAggregated indicates an expected call of GetBalancesAggregated.
func (mr *MockLedgerMockRecorder) GetBalancesAggregated(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalancesAggregated", reflect.TypeOf((*MockLedger)(nil).GetBalancesAggregated), ctx, q)
}

// GetLogs mocks base method.
func (m *MockLedger) GetLogs(ctx context.Context, query storage.LogsQuery) (*api.Cursor[core.Log], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", ctx, query)
	ret0, _ := ret[0].(*api.Cursor[core.Log])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockLedgerMockRecorder) GetLogs(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockLedger)(nil).GetLogs), ctx, query)
}

// GetMigrationsInfo mocks base method.
func (m *MockLedger) GetMigrationsInfo(ctx context.Context) ([]core.MigrationInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMigrationsInfo", ctx)
	ret0, _ := ret[0].([]core.MigrationInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigrationsInfo indicates an expected call of GetMigrationsInfo.
func (mr *MockLedgerMockRecorder) GetMigrationsInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigrationsInfo", reflect.TypeOf((*MockLedger)(nil).GetMigrationsInfo), ctx)
}

// GetTransaction mocks base method.
func (m *MockLedger) GetTransaction(ctx context.Context, id uint64) (*core.ExpandedTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx, id)
	ret0, _ := ret[0].(*core.ExpandedTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockLedgerMockRecorder) GetTransaction(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockLedger)(nil).GetTransaction), ctx, id)
}

// GetTransactions mocks base method.
func (m *MockLedger) GetTransactions(ctx context.Context, query storage.TransactionsQuery) (*api.Cursor[core.ExpandedTransaction], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, query)
	ret0, _ := ret[0].(*api.Cursor[core.ExpandedTransaction])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockLedgerMockRecorder) GetTransactions(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockLedger)(nil).GetTransactions), ctx, query)
}

// RevertTransaction mocks base method.
func (m *MockLedger) RevertTransaction(ctx context.Context, id uint64) (*core.ExpandedTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevertTransaction", ctx, id)
	ret0, _ := ret[0].(*core.ExpandedTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevertTransaction indicates an expected call of RevertTransaction.
func (mr *MockLedgerMockRecorder) RevertTransaction(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertTransaction", reflect.TypeOf((*MockLedger)(nil).RevertTransaction), ctx, id)
}

// SaveMeta mocks base method.
func (m_2 *MockLedger) SaveMeta(ctx context.Context, targetType string, targetID any, m metadata.Metadata) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SaveMeta", ctx, targetType, targetID, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMeta indicates an expected call of SaveMeta.
func (mr *MockLedgerMockRecorder) SaveMeta(ctx, targetType, targetID, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMeta", reflect.TypeOf((*MockLedger)(nil).SaveMeta), ctx, targetType, targetID, m)
}

// Stats mocks base method.
func (m *MockLedger) Stats(ctx context.Context) (ledger.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", ctx)
	ret0, _ := ret[0].(ledger.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockLedgerMockRecorder) Stats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockLedger)(nil).Stats), ctx)
}

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// CloseLedgers mocks base method.
func (m *MockBackend) CloseLedgers(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseLedgers", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseLedgers indicates an expected call of CloseLedgers.
func (mr *MockBackendMockRecorder) CloseLedgers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseLedgers", reflect.TypeOf((*MockBackend)(nil).CloseLedgers), ctx)
}

// GetLedger mocks base method.
func (m *MockBackend) GetLedger(ctx context.Context, name string) (controllers.Ledger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLedger", ctx, name)
	ret0, _ := ret[0].(controllers.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLedger indicates an expected call of GetLedger.
func (mr *MockBackendMockRecorder) GetLedger(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLedger", reflect.TypeOf((*MockBackend)(nil).GetLedger), ctx, name)
}

// GetVersion mocks base method.
func (m *MockBackend) GetVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockBackendMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockBackend)(nil).GetVersion))
}

// ListLedgers mocks base method.
func (m *MockBackend) ListLedgers(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLedgers", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLedgers indicates an expected call of ListLedgers.
func (mr *MockBackendMockRecorder) ListLedgers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLedgers", reflect.TypeOf((*MockBackend)(nil).ListLedgers), ctx)
}
