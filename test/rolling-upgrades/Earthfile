VERSION 0.8
PROJECT FormanceHQ/ledger

IMPORT github.com/formancehq/earthly:tags/v0.19.0 AS core

FROM core+base-image

CACHE --sharing=shared --id go-mod-cache /go/pkg/mod
CACHE --sharing=shared --id go-cache /root/.cache/go-build

image-test:
    ARG REPOSITORY=ghcr.io
    ARG TAG=latest
    FROM --pass-args ../../tools/generator+build-image

    DO --pass-args core+SAVE_IMAGE --COMPONENT=ledger --REPOSITORY=${REPOSITORY} --tag=$TAG

image-main:
    ARG REPOSITORY=ghcr.io
    ARG TAG
    BUILD --pass-args github.com/formancehq/ledger:main+build-image --tag=$TAG

image-current:
    ARG REPOSITORY=ghcr.io
    ARG TAG
    BUILD --pass-args ../..+build-image --tag=$TAG

sources:
    FROM core+builder-image
    COPY ../..+sources/src /src
    WORKDIR /src/test/rolling-upgrades
    COPY go.* *.go .

    SAVE ARTIFACT /src

tidy:
    FROM +sources
    CACHE --id go-mod-cache /go/pkg/mod
    CACHE --id go-cache /root/.cache/go-build
    RUN go mod tidy

    SAVE ARTIFACT go.mod AS LOCAL go.mod
    SAVE ARTIFACT go.sum AS LOCAL go.sum

cluster-create:
    FROM core+builder-image
    RUN apk update && \
        apk add --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community kubectl && \
        apk add --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community kustomize && \
        apk add helm git jq
    RUN --secret KUBE_APISERVER kubectl config set clusters.default.server ${KUBE_APISERVER}
    RUN kubectl config set clusters.default.insecure-skip-tls-verify true
    RUN --secret KUBE_TOKEN kubectl config set-credentials default --token=${KUBE_TOKEN}
    RUN kubectl config set-context default --cluster=default --user=default
    RUN kubectl config use-context default
    RUN apk update && apk add curl docker
    ARG TARGETARCH
    RUN curl -L -o vcluster "https://github.com/loft-sh/vcluster/releases/download/v0.20.4/vcluster-linux-${TARGETARCH}"
    RUN install -c -m 0755 vcluster /usr/local/bin && rm -f vcluster
    ARG CLUSTER_NAME=test
    RUN vcluster create $CLUSTER_NAME --connect=false --upgrade

run:
    ARG CLUSTER_NAME=test-rolling-upgrades
    WAIT
        BUILD --pass-args +cluster-create
        BUILD +image-test --TAG=$CLUSTER_NAME-rolling-upgrade-test
        BUILD +image-main --TAG=$CLUSTER_NAME-main
        BUILD +image-current --TAG=$CLUSTER_NAME-current
    END

    FROM --pass-args +cluster-create
    RUN curl -fsSL https://get.pulumi.com | sh -s -- --version
    ENV PATH=$PATH:/root/.pulumi/bin

    CACHE --id go-mod-cache /go/pkg/mod
    CACHE --id go-cache /root/.cache/go-build

    COPY +sources/src /src
    COPY ../../deployments/pulumi+sources/src /src/deployments/pulumi
    COPY ../../deployments/helm+sources/src /src/deployments/helm

    WORKDIR /src/test/rolling-upgrades
    COPY go.* *.go .

    ARG NO_CLEANUP=false
    ARG NO_CLEANUP_ON_FAILURE=false

    WITH DOCKER
        RUN --secret PULUMI_ACCESS_TOKEN --secret GITHUB_TOKEN sh -c '
            set -e;

            echo "Connecting to VCluster..."
            vcluster connect ${CLUSTER_NAME} --namespace vcluster-${CLUSTER_NAME};

            echo "Connected on context '$(kubectl config current-context)'";

            echo "Waiting for VCluster to be ready..."
            until kubectl get nodes; do sleep 1s; done;

            echo "Running test..."
            go test \
                --test-image ghcr.io/formancehq/ledger:$CLUSTER_NAME-rolling-upgrade-test \
                --latest-version $CLUSTER_NAME-main \
                --actual-version $CLUSTER_NAME-current \
                --project ledger \
                --stack-prefix-name $CLUSTER_NAME- \
                --no-cleanup=$NO_CLEANUP \
                --no-cleanup-on-failure=$NO_CLEANUP_ON_FAILURE;
        '
    END

    IF [ $NO_CLEANUP = "false" ]
        RUN vcluster delete $CLUSTER_NAME --delete-namespace
    END

lint:
    FROM +tidy
    CACHE --id go-mod-cache /go/pkg/mod
    CACHE --id go-cache /root/.cache/go-build
    CACHE --id golangci-cache /root/.cache/golangci-lint

    RUN golangci-lint run --fix --build-tags it --timeout 5m

    SAVE ARTIFACT main_test.go AS LOCAL main_test.go

pre-commit:
    BUILD +tidy
    BUILD +lint