// Code generated by MockGen. DO NOT EDIT.
// Source: collect.go
//
// Generated by this command:
//
//	mockgen -source collect.go -destination collect_generated.go -package migrations . MigrationFileSystem
//

// Package migrations is a generated GoMock package.
package migrations

import (
	fs "io/fs"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMigrationFileSystem is a mock of MigrationFileSystem interface.
type MockMigrationFileSystem struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationFileSystemMockRecorder
}

// MockMigrationFileSystemMockRecorder is the mock recorder for MockMigrationFileSystem.
type MockMigrationFileSystemMockRecorder struct {
	mock *MockMigrationFileSystem
}

// NewMockMigrationFileSystem creates a new mock instance.
func NewMockMigrationFileSystem(ctrl *gomock.Controller) *MockMigrationFileSystem {
	mock := &MockMigrationFileSystem{ctrl: ctrl}
	mock.recorder = &MockMigrationFileSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigrationFileSystem) EXPECT() *MockMigrationFileSystemMockRecorder {
	return m.recorder
}

// ReadDir mocks base method.
func (m *MockMigrationFileSystem) ReadDir(dir string) ([]fs.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", dir)
	ret0, _ := ret[0].([]fs.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockMigrationFileSystemMockRecorder) ReadDir(dir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockMigrationFileSystem)(nil).ReadDir), dir)
}

// ReadFile mocks base method.
func (m *MockMigrationFileSystem) ReadFile(filename string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", filename)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockMigrationFileSystemMockRecorder) ReadFile(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockMigrationFileSystem)(nil).ReadFile), filename)
}
