// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/formancehq/stack/ledger/client/internal/utils"
	"time"
)

type TransactionData struct {
	Postings  []Posting      `json:"postings"`
	Reference *string        `json:"reference,omitempty"`
	Metadata  map[string]any `json:"metadata,omitempty"`
	Timestamp *time.Time     `json:"timestamp,omitempty"`
}

func (t TransactionData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransactionData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TransactionData) GetPostings() []Posting {
	if o == nil {
		return []Posting{}
	}
	return o.Postings
}

func (o *TransactionData) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *TransactionData) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *TransactionData) GetTimestamp() *time.Time {
	if o == nil {
		return nil
	}
	return o.Timestamp
}
