// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/formancehq/stack/ledger/client/internal/utils"
	"github.com/formancehq/stack/ledger/client/models/components"
	"time"
)

type V2GetBalancesAggregatedRequest struct {
	// Name of the ledger.
	Ledger string     `pathParam:"style=simple,explode=false,name=ledger"`
	Pit    *time.Time `queryParam:"style=form,explode=true,name=pit"`
	// Use insertion date instead of effective date
	UseInsertionDate *bool          `queryParam:"style=form,explode=true,name=useInsertionDate"`
	RequestBody      map[string]any `request:"mediaType=application/json"`
}

func (v V2GetBalancesAggregatedRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V2GetBalancesAggregatedRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *V2GetBalancesAggregatedRequest) GetLedger() string {
	if o == nil {
		return ""
	}
	return o.Ledger
}

func (o *V2GetBalancesAggregatedRequest) GetPit() *time.Time {
	if o == nil {
		return nil
	}
	return o.Pit
}

func (o *V2GetBalancesAggregatedRequest) GetUseInsertionDate() *bool {
	if o == nil {
		return nil
	}
	return o.UseInsertionDate
}

func (o *V2GetBalancesAggregatedRequest) GetRequestBody() map[string]any {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type V2GetBalancesAggregatedResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	V2AggregateBalancesResponse *components.V2AggregateBalancesResponse
}

func (o *V2GetBalancesAggregatedResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *V2GetBalancesAggregatedResponse) GetV2AggregateBalancesResponse() *components.V2AggregateBalancesResponse {
	if o == nil {
		return nil
	}
	return o.V2AggregateBalancesResponse
}
