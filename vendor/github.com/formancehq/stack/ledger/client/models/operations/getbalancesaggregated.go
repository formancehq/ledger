// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/formancehq/stack/ledger/client/models/components"
)

type GetBalancesAggregatedRequest struct {
	// Name of the ledger.
	Ledger string `pathParam:"style=simple,explode=false,name=ledger"`
	// Filter balances involving given account, either as source or destination.
	Address *string `queryParam:"style=form,explode=true,name=address"`
	// Use insertion date instead of effective date
	UseInsertionDate *bool `queryParam:"style=form,explode=true,name=useInsertionDate"`
}

func (o *GetBalancesAggregatedRequest) GetLedger() string {
	if o == nil {
		return ""
	}
	return o.Ledger
}

func (o *GetBalancesAggregatedRequest) GetAddress() *string {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *GetBalancesAggregatedRequest) GetUseInsertionDate() *bool {
	if o == nil {
		return nil
	}
	return o.UseInsertionDate
}

type GetBalancesAggregatedResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	AggregateBalancesResponse *components.AggregateBalancesResponse
}

func (o *GetBalancesAggregatedResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetBalancesAggregatedResponse) GetAggregateBalancesResponse() *components.AggregateBalancesResponse {
	if o == nil {
		return nil
	}
	return o.AggregateBalancesResponse
}
