name: Pull Request - Open
on:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
jobs:
  build_control:
    name: 'Build Control'
    runs-on: ubuntu-latest
    steps:
      - name: Get latest release of Numary/Control
        uses: rez0n/actions-github-release@main
        id: control_release
        env:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: "numary/control"
          type: "stable"
      - run: curl -OL ${{ steps.control_release.outputs.browser_download_url }}
      - run: tar -zxvf numary-control-${{ steps.control_release.outputs.release }}.tar.gz
      - run: rm -rf numary-control-${{ steps.control_release.outputs.release }}.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: control-dist
          path: ./**
  Test_sqlite:
    name: 'Test - SQLite'
    runs-on: ubuntu-latest
    needs:
      - build_control
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '1.18'
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: get deps
        run: go mod download
      - name: fetch numary control
        uses: actions/download-artifact@v2
        with:
          name: control-dist
          path: cmd/control/
      - name: run tests
        run: go test -tags json1 -v -coverpkg ./... -coverprofile coverage.out -covermode atomic ./...
      - name: Upload coverage to Codecov
        run: bash <(curl -s https://codecov.io/bash)
  Test_postgres:
    name: 'Test - PostgreSQL'
    runs-on: ubuntu-latest
    needs:
      - build_control
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: ledger
          POSTGRES_PASSWORD: ledger
          POSTGRES_DB: ledger
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '1.18'
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: get deps
        run: go mod download
      - name: fetch numary control
        uses: actions/download-artifact@v2
        with:
          name: control-dist
          path: cmd/control/
      - name: run tests
        run: go test -tags json1 -v -coverpkg ./... -coverprofile coverage.out -covermode atomic ./...
        env:
          NUMARY_STORAGE_DRIVER: "postgres"
          NUMARY_STORAGE_POSTGRES_CONN_STRING: "postgresql://ledger:ledger@127.0.0.1/ledger"
      - name: Upload coverage to Codecov
        run: bash <(curl -s https://codecov.io/bash)
  Lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: -v --timeout 10m -E gofmt,gci
  Build:
    name: 'Build'
    needs:
      - build_control
      - Test_sqlite
      - Test_postgres
      - Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '1.18'
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: get deps
        run: go get
        env:
          CGO_ENABLED: 1
      - name: fetch numary control
        uses: actions/download-artifact@v2
        with:
          name: control-dist
          path: cmd/control/
      - name: OSXCross for CGO Support
        run: |
          mkdir ../../osxcross
          git clone https://github.com/plentico/osxcross-target.git ../../osxcross/target
      - name: Downgrade libssl
        run: |
          echo 'deb http://security.ubuntu.com/ubuntu bionic-security main' | sudo tee -a /etc/apt/sources.list
          sudo apt update && apt-cache policy libssl1.0-dev
          sudo apt-get install libssl1.0-dev
      - run: sudo apt install gcc-mingw-w64 -y
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: build --parallelism 4 --rm-dist --skip-validate --snapshot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SEGMENT_WRITE_KEY: ${{ secrets.SEGMENT_WRITE_KEY_OSS }}
      - uses: actions/upload-artifact@v2
        with:
          name: build-${{matrix.file}}
          path: ./build/**
  sdk:
    name: 'Generate SDK'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./sdk/
    strategy:
      matrix:
        sdk: [ go, php, python, typescript-node ]
    needs:
      - Lint
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.NUMARY_GITHUB_TOKEN }}
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.NUMARY_GITHUB_TOKEN }}
          repository: numary/numary-sdk-${{ matrix.sdk }}
          path: sdks/${{ matrix.sdk }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Install Task
        uses: arduino/setup-task@v1
      - name: Launch Generate
        run: task generate VERSION=develop  -- ${{ matrix.sdk }}