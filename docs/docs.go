// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/_info": {
            "get": {
                "description": "Show server informations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Server Info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/config.ConfigInfo"
                        }
                    }
                }
            }
        },
        "/{ledger}/accounts": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "List all accounts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ledger",
                        "name": "ledger",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "pagination cursor, will return accounts after given address (in descending order)",
                        "name": "after",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/controllers.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "cursor": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/query.Cursor"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "data": {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/definitions/core.Account"
                                                            }
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/{ledger}/accounts/{accountId}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get account by address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ledger",
                        "name": "ledger",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "accountId",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/controllers.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/core.Account"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/{ledger}/accounts/{accountId}/metadata": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Add metadata to account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ledger",
                        "name": "ledger",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "accountId",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Empty response"
                    },
                    "400": {
                        "description": ""
                    }
                }
            }
        },
        "/{ledger}/mapping": {
            "get": {
                "description": "Get ledger mapping",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contracts"
                ],
                "summary": "Get mapping",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ledger",
                        "name": "ledger",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/controllers.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/core.Mapping"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "put": {
                "description": "Update ledger mapping",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mapping"
                ],
                "summary": "Put mapping",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ledger",
                        "name": "ledger",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "mapping",
                        "name": "mapping",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.Mapping"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/controllers.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/core.Mapping"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/{ledger}/script": {
            "post": {
                "description": "Execute a Numscript and create the transaction if any",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "script"
                ],
                "summary": "Execute Numscript",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ledger",
                        "name": "ledger",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "script",
                        "name": "script",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.Script"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.ScriptResponse"
                        }
                    }
                }
            }
        },
        "/{ledger}/stats": {
            "get": {
                "description": "Get ledger stats (aggregate metrics on accounts and transactions)\nThe stats for account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Get Stats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ledger",
                        "name": "ledger",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/controllers.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/ledger.Stats"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/{ledger}/transactions": {
            "get": {
                "description": "Get all ledger transactions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get all Transactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ledger",
                        "name": "ledger",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "pagination cursor, will return transactions after given txid (in descending order)",
                        "name": "after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "find transactions by reference field",
                        "name": "reference",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "find transactions with postings involving given account, either as source or destination",
                        "name": "account",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/controllers.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "cursor": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/query.Cursor"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "data": {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/definitions/core.Transaction"
                                                            }
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new ledger transaction\nCommit a new transaction to the ledger",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Create Transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ledger",
                        "name": "ledger",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "transaction",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.TransactionData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/controllers.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/core.Transaction"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/{ledger}/transactions/batch": {
            "post": {
                "description": "Create a new ledger transactions batch\nCommit a batch of new transactions to the ledger",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Create Transactions Batch",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ledger",
                        "name": "ledger",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "transactions",
                        "name": "transactions",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.Transactions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.BaseResponse"
                        }
                    },
                    "400": {
                        "description": ""
                    }
                }
            }
        },
        "/{ledger}/transactions/{txid}": {
            "get": {
                "description": "Get transaction by transaction id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get Transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ledger",
                        "name": "ledger",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "txid",
                        "name": "txid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/controllers.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/core.Transaction"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controllers.BaseResponse"
                        }
                    }
                }
            }
        },
        "/{ledger}/transactions/{txid}/metadata": {
            "post": {
                "description": "Set a new metadata to a ledger transaction by transaction id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Set Transaction Metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ledger",
                        "name": "ledger",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "txid",
                        "name": "txid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Empty response"
                    }
                }
            }
        },
        "/{ledger}/transactions/{txid}/revert": {
            "post": {
                "description": "Revert a ledger transaction by transaction id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Revert Transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ledger",
                        "name": "ledger",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "txid",
                        "name": "txid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Empty response"
                    }
                }
            }
        }
    },
    "definitions": {
        "config.Config": {
            "type": "object",
            "properties": {
                "storage": {
                    "$ref": "#/definitions/config.LedgerStorage"
                }
            }
        },
        "config.ConfigInfo": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/config.Config"
                },
                "server": {
                    "type": "string"
                },
                "version": {}
            }
        },
        "config.LedgerStorage": {
            "type": "object",
            "properties": {
                "driver": {
                    "type": "string"
                },
                "ledgers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "controllers.BaseResponse": {
            "type": "object",
            "properties": {
                "cursor": {},
                "data": {}
            }
        },
        "controllers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "string",
                    "enum": [
                        "INTERNAL",
                        "CONFLICT",
                        "INSUFFICIENT_FUND",
                        "VALIDATION",
                        "NOT_FOUND"
                    ]
                },
                "error_message": {
                    "type": "string"
                }
            }
        },
        "controllers.ScriptResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "error_code": {
                    "type": "string",
                    "enum": [
                        "INTERNAL",
                        "CONFLICT",
                        "INSUFFICIENT_FUND",
                        "VALIDATION",
                        "NOT_FOUND"
                    ]
                },
                "error_message": {
                    "type": "string"
                }
            }
        },
        "core.Account": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "users:001"
                },
                "balances": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "example": {
                        "COIN": 100
                    }
                },
                "metadata": {
                    "type": "object"
                },
                "type": {
                    "type": "string",
                    "example": "virtual"
                },
                "volumes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "core.Contract": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "string"
                },
                "expr": {}
            }
        },
        "core.Mapping": {
            "type": "object",
            "properties": {
                "contracts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.Contract"
                    }
                }
            }
        },
        "core.Posting": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "asset": {
                    "type": "string"
                },
                "destination": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                }
            }
        },
        "core.Script": {
            "type": "object",
            "properties": {
                "plain": {
                    "type": "string"
                },
                "vars": {
                    "type": "object"
                }
            }
        },
        "core.Transaction": {
            "type": "object",
            "properties": {
                "metadata": {
                    "type": "object"
                },
                "postings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.Posting"
                    }
                },
                "reference": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "txid": {
                    "type": "integer"
                }
            }
        },
        "core.TransactionData": {
            "type": "object",
            "properties": {
                "metadata": {
                    "type": "object"
                },
                "postings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.Posting"
                    }
                },
                "reference": {
                    "type": "string"
                }
            }
        },
        "core.Transactions": {
            "type": "object",
            "required": [
                "transactions"
            ],
            "properties": {
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.TransactionData"
                    }
                }
            }
        },
        "ledger.Stats": {
            "type": "object",
            "properties": {
                "accounts": {
                    "type": "integer"
                },
                "transactions": {
                    "type": "integer"
                }
            }
        },
        "query.Cursor": {
            "type": "object",
            "properties": {
                "data": {},
                "has_more": {
                    "type": "boolean"
                },
                "next": {
                    "type": "string"
                },
                "page_size": {
                    "type": "integer"
                },
                "previous": {
                    "type": "string"
                },
                "remaining_results": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:3068",
	BasePath:    "",
	Schemes:     []string{"http", "https"},
	Title:       "Ledger API",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
