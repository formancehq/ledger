{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/formancehq/ledger/deployments/pulumi/pkg/config/config",
  "$ref": "#/$defs/Config",
  "$defs": {
    "API": {
      "properties": {
        "replica-count": {
          "type": "integer",
          "description": "ReplicaCount is the number of replicas for the API"
        },
        "grace-period": {
          "type": "integer",
          "description": "GracePeriod is the grace period for the API"
        },
        "ballast-size-in-bytes": {
          "type": "integer",
          "description": "BallastSizeInBytes is the ballast size in bytes for the API"
        },
        "numscript-cache-max-count": {
          "type": "integer",
          "description": "NumscriptCacheMaxCount is the maximum number of scripts to cache"
        },
        "bulk-max-size": {
          "type": "integer",
          "description": "BulkMaxSize is the maximum size for bulk requests"
        },
        "bulk-parallel": {
          "type": "integer",
          "description": "BulkParallel is the number of parallel bulk requests"
        },
        "termination-grace-period-seconds": {
          "type": "integer",
          "description": "TerminationGracePeriodSeconds is the termination grace period in seconds"
        },
        "experimental-features": {
          "type": "boolean",
          "description": "ExperimentalFeatures is whether to enable experimental features"
        },
        "experimental-numscript-interpreter": {
          "type": "boolean",
          "description": "ExperimentalNumscriptInterpreter is whether to enable the experimental numscript interpreter"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Config": {
      "properties": {
        "namespace": {
          "type": "string",
          "description": "Namespace is the namespace for the ledger"
        },
        "monitoring": {
          "$ref": "#/$defs/Monitoring",
          "description": "Monitoring is the monitoring configuration for the ledger"
        },
        "version": {
          "type": "string",
          "description": "Tag is the version tag for the ledger"
        },
        "image-pull-policy": {
          "type": "string",
          "description": "ImagePullPolicy is the image pull policy for the ledger"
        },
        "debug": {
          "type": "boolean",
          "description": "Debug is whether to enable debug mode"
        },
        "storage": {
          "$ref": "#/$defs/Storage",
          "description": "Storage is the storage configuration for the ledger"
        },
        "api": {
          "$ref": "#/$defs/API",
          "description": "API is the API configuration for the ledger"
        },
        "worker": {
          "$ref": "#/$defs/Worker",
          "description": "Worker is the worker configuration for the ledger"
        },
        "ingress": {
          "$ref": "#/$defs/Ingress",
          "description": "Ingress is the ingress configuration for the ledger"
        },
        "provision": {
          "$ref": "#/$defs/Provision",
          "description": "Provision is the initialization configuration for the ledger"
        },
        "timeout": {
          "type": "integer",
          "description": "Timeout is the timeout for the ledger"
        },
        "install-dev-box": {
          "type": "boolean",
          "description": "InstallDevBox is whether to install the dev box"
        },
        "generator": {
          "$ref": "#/$defs/Generator",
          "description": "Generator is the generator configuration for the ledger"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ConnectivityDatabase": {
      "properties": {
        "aws-enable-iam": {
          "type": "boolean",
          "description": "AWSEnableIAM is whether to enable IAM for the database"
        },
        "max-idle-conns": {
          "type": "integer",
          "description": "MaxIdleConns is the maximum number of idle connections for the database"
        },
        "max-open-conns": {
          "type": "integer",
          "description": "MaxOpenConns is the maximum number of open connections for the database"
        },
        "conn-max-idle-time": {
          "type": "integer",
          "description": "ConnMaxIdleTime is the maximum idle time for a connection"
        },
        "options": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Options is the options for the Postgres database to pass on the dsn"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Generator": {
      "properties": {
        "generator-version": {
          "type": "string",
          "description": "GeneratorVersion is the version of the generator"
        },
        "until-log-id": {
          "type": "integer",
          "description": "UntilLogID is the log ID to run the generator until"
        },
        "script": {
          "type": "string",
          "description": "Script is the script to run"
        },
        "script-from-file": {
          "type": "string",
          "description": "ScriptFromFile is the script to run from a file (related to the root directory)"
        },
        "vus": {
          "type": "integer",
          "description": "VUs is the number of virtual users to run"
        },
        "ledger": {
          "type": "string",
          "description": "Ledger is the ledger to run the generator against"
        },
        "http-client-timeout": {
          "type": "integer",
          "description": "HTTPClientTimeout is the http client timeout for the generator"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Ingress": {
      "properties": {
        "host": {
          "type": "string",
          "description": "Host is the hostname for the ingress"
        },
        "secret": {
          "type": "string",
          "description": "Secret is the secret name for the ingress"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "LedgerConfig": {
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Bucket is the bucket for the ledger"
        },
        "metadata": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Metadata is the metadata for the ledger"
        },
        "features": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Features is the features for the ledger"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Monitoring": {
      "properties": {
        "resource-attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "ResourceAttributes is the resource attributes for OpenTelemetry"
        },
        "service-name": {
          "type": "string",
          "description": "ServiceName is the service name for OpenTelemetry"
        },
        "traces": {
          "$ref": "#/$defs/MonitoringTraces",
          "description": "Traces is the traces configuration for OpenTelemetry"
        },
        "metrics": {
          "$ref": "#/$defs/MonitoringMetrics",
          "description": "Metrics is the metrics configuration for OpenTelemetry"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "MonitoringMetrics": {
      "properties": {
        "push-interval": {
          "type": "integer",
          "description": "PushInterval is the push interval for the metrics exporter"
        },
        "runtime": {
          "type": "boolean",
          "description": "Runtime is whether to enable runtime metrics"
        },
        "runtime-minimum-read-mem-stats-interval": {
          "type": "integer",
          "description": "RuntimeMinimumReadMemStatsInterval is the minimum read memory stats interval for runtime metrics"
        },
        "exporter": {
          "type": "string",
          "description": "Exporter is the exporter for metrics"
        },
        "keep-in-memory": {
          "type": "boolean",
          "description": "KeepInMemory is whether to keep metrics in memory"
        },
        "otlp": {
          "$ref": "#/$defs/MonitoringMetricsOTLP",
          "description": "OTLP is the OTLP configuration for metrics"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "MonitoringMetricsOTLP": {
      "properties": {
        "mode": {
          "type": "string",
          "description": "Mode is the mode for the OTLP metrics exporter"
        },
        "endpoint": {
          "type": "string",
          "description": "Endpoint is the endpoint for the OTLP metrics exporter"
        },
        "insecure": {
          "type": "boolean",
          "description": "Insecure is whether the OTLP metrics exporter is insecure"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "MonitoringTraces": {
      "properties": {
        "batch": {
          "type": "boolean",
          "description": "Batch is whether to batch traces"
        },
        "exporter": {
          "type": "string",
          "description": "Exporter is the exporter flag for traces"
        },
        "jaeger": {
          "$ref": "#/$defs/MonitoringTracesJaeger",
          "description": "Jaeger is the Jaeger configuration for traces"
        },
        "otlp": {
          "$ref": "#/$defs/MonitoringTracesOTLP",
          "description": "OTLP is the OTLP configuration for traces"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "MonitoringTracesJaeger": {
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "Endpoint is the endpoint for the Jaeger exporter"
        },
        "user": {
          "type": "string",
          "description": "User is the user for the Jaeger exporter"
        },
        "password": {
          "type": "string",
          "description": "Password is the password for the Jaeger exporter"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "MonitoringTracesOTLP": {
      "properties": {
        "mode": {
          "type": "string",
          "description": "Mode is the mode for the OTLP exporter"
        },
        "endpoint": {
          "type": "string",
          "description": "Endpoint is the endpoint for the OTLP exporter"
        },
        "insecure": {
          "type": "boolean",
          "description": "Insecure is whether the OTLP exporter is insecure"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "PostgresDatabase": {
      "properties": {
        "uri": {
          "type": "string",
          "description": "URI is the URI for the Postgres database"
        },
        "install": {
          "$ref": "#/$defs/PostgresInstall",
          "description": "Install is whether to install the Postgres database"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "PostgresInstall": {
      "properties": {
        "username": {
          "type": "string",
          "description": "Username is the username for the Postgres database"
        },
        "password": {
          "type": "string",
          "description": "Password is the password for the Postgres database"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Provision": {
      "properties": {
        "provisioner-version": {
          "type": "string",
          "description": "ProvisionerVersion is the version of the provisioner (default to the ledger version if not specified)"
        },
        "ledgers": {
          "additionalProperties": {
            "$ref": "#/$defs/LedgerConfig"
          },
          "type": "object",
          "description": "Ledgers are the ledgers to auto create"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "RDSClusterCreate": {
      "properties": {
        "use-subnet-group-name": {
          "type": "string",
          "description": "UseSubnetGroupName is the name of the subnet group to use for the RDS cluster"
        },
        "master-username": {
          "type": "string",
          "description": "MasterUsername is the master username for the RDS cluster"
        },
        "master-password": {
          "type": "string",
          "description": "MasterPassword is the master password for the RDS cluster"
        },
        "initialization-snapshot-identifier": {
          "type": "string",
          "description": "SnapshotIdentifier is the snapshot identifier to use for the RDS cluster"
        },
        "performance-insights-enabled": {
          "type": "boolean",
          "description": "PerformanceInsightsEnabled is whether performance insights is enabled for the RDS cluster"
        },
        "instance-class": {
          "type": "string",
          "description": "InstanceClass is the instance class for the RDS cluster"
        },
        "engine": {
          "type": "string",
          "description": "Engine is the engine for the RDS cluster"
        },
        "engine-version": {
          "type": "string",
          "description": "EngineVersion is the engine version for the RDS cluster"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "RDSDatabase": {
      "oneOf": [
        {
          "required": [
            "use-cluster"
          ],
          "title": "use-cluster"
        },
        {
          "required": [
            "create-cluster"
          ],
          "title": "create-cluster"
        }
      ],
      "properties": {
        "use-cluster": {
          "$ref": "#/$defs/RDSUseExistingCluster",
          "description": "UseCluster is the configuration to use an existing RDS cluster"
        },
        "create-cluster": {
          "$ref": "#/$defs/RDSClusterCreate",
          "description": "CreateCluster is the configuration to create a new RDS cluster"
        },
        "post-migrate-snapshot": {
          "$ref": "#/$defs/RDSPostMigrateSnapshot",
          "description": "PostMigrateSnapshot is the configuration for a snapshot to create after migrations"
        },
        "use-db-name": {
          "type": "string",
          "description": "UseDBName is the name of the database to use"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "RDSPostMigrateSnapshot": {
      "properties": {
        "snapshot-identifier": {
          "type": "string",
          "description": "SnapshotIdentifier is the snapshot identifier to create after migrations"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "RDSUseExistingCluster": {
      "properties": {
        "cluster-name": {
          "type": "string",
          "description": "ClusterName is the name of the existing RDS cluster to use"
        },
        "master-password": {
          "type": "string",
          "description": "MasterPassword is the master password for the existing RDS cluster"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Storage": {
      "oneOf": [
        {
          "required": [
            "rds"
          ],
          "title": "rds"
        },
        {
          "required": [
            "postgres"
          ],
          "title": "postgres"
        }
      ],
      "properties": {
        "rds": {
          "$ref": "#/$defs/RDSDatabase",
          "description": "RDS is the RDS configuration for the database"
        },
        "postgres": {
          "$ref": "#/$defs/PostgresDatabase",
          "description": "Postgres is the Postgres configuration for the database"
        },
        "connectivity": {
          "$ref": "#/$defs/ConnectivityDatabase",
          "description": "Connectivity is the connectivity configuration for the database"
        },
        "disable-upgrade": {
          "type": "boolean",
          "description": "DisableUpgrade is whether to disable upgrades for the database"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Worker": {
      "properties": {},
      "additionalProperties": false,
      "type": "object"
    }
  }
}
