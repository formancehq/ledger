// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go
//
// Generated by this command:
//
//	mockgen -source controller.go -destination connectors_generated.go -package system . ConfigValidator
//

// Package system is a generated GoMock package.
package system

import (
	context "context"
	reflect "reflect"

	bunpaginate "github.com/formancehq/go-libs/v3/bun/bunpaginate"
	ledger "github.com/formancehq/ledger/internal"
	ledger0 "github.com/formancehq/ledger/internal/controller/ledger"
	common "github.com/formancehq/ledger/internal/storage/common"
	system "github.com/formancehq/ledger/internal/storage/system"
	gomock "go.uber.org/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
	isgomock struct{}
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// CreateConnector mocks base method.
func (m *MockController) CreateConnector(ctx context.Context, configuration ledger.ConnectorConfiguration) (*ledger.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnector", ctx, configuration)
	ret0, _ := ret[0].(*ledger.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnector indicates an expected call of CreateConnector.
func (mr *MockControllerMockRecorder) CreateConnector(ctx, configuration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnector", reflect.TypeOf((*MockController)(nil).CreateConnector), ctx, configuration)
}

// CreateLedger mocks base method.
func (m *MockController) CreateLedger(ctx context.Context, name string, configuration ledger.Configuration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLedger", ctx, name, configuration)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLedger indicates an expected call of CreateLedger.
func (mr *MockControllerMockRecorder) CreateLedger(ctx, name, configuration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLedger", reflect.TypeOf((*MockController)(nil).CreateLedger), ctx, name, configuration)
}

// CreatePipeline mocks base method.
func (m *MockController) CreatePipeline(ctx context.Context, pipelineConfiguration ledger.PipelineConfiguration) (*ledger.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", ctx, pipelineConfiguration)
	ret0, _ := ret[0].(*ledger.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipeline indicates an expected call of CreatePipeline.
func (mr *MockControllerMockRecorder) CreatePipeline(ctx, pipelineConfiguration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockController)(nil).CreatePipeline), ctx, pipelineConfiguration)
}

// DeleteConnector mocks base method.
func (m *MockController) DeleteConnector(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnector", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConnector indicates an expected call of DeleteConnector.
func (mr *MockControllerMockRecorder) DeleteConnector(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnector", reflect.TypeOf((*MockController)(nil).DeleteConnector), ctx, id)
}

// DeleteLedgerMetadata mocks base method.
func (m *MockController) DeleteLedgerMetadata(ctx context.Context, param, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLedgerMetadata", ctx, param, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLedgerMetadata indicates an expected call of DeleteLedgerMetadata.
func (mr *MockControllerMockRecorder) DeleteLedgerMetadata(ctx, param, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLedgerMetadata", reflect.TypeOf((*MockController)(nil).DeleteLedgerMetadata), ctx, param, key)
}

// DeletePipeline mocks base method.
func (m *MockController) DeletePipeline(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipeline", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePipeline indicates an expected call of DeletePipeline.
func (mr *MockControllerMockRecorder) DeletePipeline(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockController)(nil).DeletePipeline), ctx, id)
}

// GetConnector mocks base method.
func (m *MockController) GetConnector(ctx context.Context, id string) (*ledger.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnector", ctx, id)
	ret0, _ := ret[0].(*ledger.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnector indicates an expected call of GetConnector.
func (mr *MockControllerMockRecorder) GetConnector(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnector", reflect.TypeOf((*MockController)(nil).GetConnector), ctx, id)
}

// GetLedger mocks base method.
func (m *MockController) GetLedger(ctx context.Context, name string) (*ledger.Ledger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLedger", ctx, name)
	ret0, _ := ret[0].(*ledger.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLedger indicates an expected call of GetLedger.
func (mr *MockControllerMockRecorder) GetLedger(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLedger", reflect.TypeOf((*MockController)(nil).GetLedger), ctx, name)
}

// GetLedgerController mocks base method.
func (m *MockController) GetLedgerController(ctx context.Context, name string) (ledger0.Controller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLedgerController", ctx, name)
	ret0, _ := ret[0].(ledger0.Controller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLedgerController indicates an expected call of GetLedgerController.
func (mr *MockControllerMockRecorder) GetLedgerController(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLedgerController", reflect.TypeOf((*MockController)(nil).GetLedgerController), ctx, name)
}

// GetPipeline mocks base method.
func (m *MockController) GetPipeline(ctx context.Context, id string) (*ledger.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipeline", ctx, id)
	ret0, _ := ret[0].(*ledger.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline.
func (mr *MockControllerMockRecorder) GetPipeline(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockController)(nil).GetPipeline), ctx, id)
}

// ListConnectors mocks base method.
func (m *MockController) ListConnectors(ctx context.Context) (*bunpaginate.Cursor[ledger.Connector], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectors", ctx)
	ret0, _ := ret[0].(*bunpaginate.Cursor[ledger.Connector])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectors indicates an expected call of ListConnectors.
func (mr *MockControllerMockRecorder) ListConnectors(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectors", reflect.TypeOf((*MockController)(nil).ListConnectors), ctx)
}

// ListLedgers mocks base method.
func (m *MockController) ListLedgers(ctx context.Context, query common.PaginatedQuery[system.ListLedgersQueryPayload]) (*bunpaginate.Cursor[ledger.Ledger], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLedgers", ctx, query)
	ret0, _ := ret[0].(*bunpaginate.Cursor[ledger.Ledger])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLedgers indicates an expected call of ListLedgers.
func (mr *MockControllerMockRecorder) ListLedgers(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLedgers", reflect.TypeOf((*MockController)(nil).ListLedgers), ctx, query)
}

// ListPipelines mocks base method.
func (m *MockController) ListPipelines(ctx context.Context) (*bunpaginate.Cursor[ledger.Pipeline], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelines", ctx)
	ret0, _ := ret[0].(*bunpaginate.Cursor[ledger.Pipeline])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelines indicates an expected call of ListPipelines.
func (mr *MockControllerMockRecorder) ListPipelines(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelines", reflect.TypeOf((*MockController)(nil).ListPipelines), ctx)
}

// ResetPipeline mocks base method.
func (m *MockController) ResetPipeline(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPipeline", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPipeline indicates an expected call of ResetPipeline.
func (mr *MockControllerMockRecorder) ResetPipeline(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPipeline", reflect.TypeOf((*MockController)(nil).ResetPipeline), ctx, id)
}

// StartPipeline mocks base method.
func (m *MockController) StartPipeline(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPipeline", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartPipeline indicates an expected call of StartPipeline.
func (mr *MockControllerMockRecorder) StartPipeline(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPipeline", reflect.TypeOf((*MockController)(nil).StartPipeline), ctx, id)
}

// StopPipeline mocks base method.
func (m *MockController) StopPipeline(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPipeline", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopPipeline indicates an expected call of StopPipeline.
func (mr *MockControllerMockRecorder) StopPipeline(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPipeline", reflect.TypeOf((*MockController)(nil).StopPipeline), ctx, id)
}

// UpdateLedgerMetadata mocks base method.
func (m_2 *MockController) UpdateLedgerMetadata(ctx context.Context, name string, m map[string]string) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateLedgerMetadata", ctx, name, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLedgerMetadata indicates an expected call of UpdateLedgerMetadata.
func (mr *MockControllerMockRecorder) UpdateLedgerMetadata(ctx, name, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLedgerMetadata", reflect.TypeOf((*MockController)(nil).UpdateLedgerMetadata), ctx, name, m)
}
