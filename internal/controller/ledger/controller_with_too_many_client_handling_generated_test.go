// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//	mockgen -write_source_comment=false -write_package_comment=false -source controller_with_too_many_client_handling.go -destination controller_with_too_many_client_handling_generated_test.go -package ledger . DelayCalculator -typed
//

package ledger

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockDelayCalculator is a mock of DelayCalculator interface.
type MockDelayCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockDelayCalculatorMockRecorder
	isgomock struct{}
}

// MockDelayCalculatorMockRecorder is the mock recorder for MockDelayCalculator.
type MockDelayCalculatorMockRecorder struct {
	mock *MockDelayCalculator
}

// NewMockDelayCalculator creates a new mock instance.
func NewMockDelayCalculator(ctrl *gomock.Controller) *MockDelayCalculator {
	mock := &MockDelayCalculator{ctrl: ctrl}
	mock.recorder = &MockDelayCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelayCalculator) EXPECT() *MockDelayCalculatorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockDelayCalculator) Next(arg0 int) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockDelayCalculatorMockRecorder) Next(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockDelayCalculator)(nil).Next), arg0)
}
