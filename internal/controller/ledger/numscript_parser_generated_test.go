// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//	mockgen -write_source_comment=false -write_package_comment=false -source numscript_parser.go -destination numscript_parser_generated_test.go -package ledger . NumscriptParser
//

package ledger

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNumscriptParser is a mock of NumscriptParser interface.
type MockNumscriptParser struct {
	ctrl     *gomock.Controller
	recorder *MockNumscriptParserMockRecorder
	isgomock struct{}
}

// MockNumscriptParserMockRecorder is the mock recorder for MockNumscriptParser.
type MockNumscriptParserMockRecorder struct {
	mock *MockNumscriptParser
}

// NewMockNumscriptParser creates a new mock instance.
func NewMockNumscriptParser(ctrl *gomock.Controller) *MockNumscriptParser {
	mock := &MockNumscriptParser{ctrl: ctrl}
	mock.recorder = &MockNumscriptParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNumscriptParser) EXPECT() *MockNumscriptParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockNumscriptParser) Parse(script string) (NumscriptRuntime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", script)
	ret0, _ := ret[0].(NumscriptRuntime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockNumscriptParserMockRecorder) Parse(script any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockNumscriptParser)(nil).Parse), script)
}
