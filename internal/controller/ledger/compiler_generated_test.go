// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//	mockgen -write_source_comment=false -write_package_comment=false -source compiler.go -destination compiler_generated_test.go -package ledger . Compiler
package ledger

import (
	reflect "reflect"

	program "github.com/formancehq/ledger/internal/machine/vm/program"
	gomock "go.uber.org/mock/gomock"
)

// MockCompiler is a mock of Compiler interface.
type MockCompiler struct {
	ctrl     *gomock.Controller
	recorder *MockCompilerMockRecorder
}

// MockCompilerMockRecorder is the mock recorder for MockCompiler.
type MockCompilerMockRecorder struct {
	mock *MockCompiler
}

// NewMockCompiler creates a new mock instance.
func NewMockCompiler(ctrl *gomock.Controller) *MockCompiler {
	mock := &MockCompiler{ctrl: ctrl}
	mock.recorder = &MockCompilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompiler) EXPECT() *MockCompilerMockRecorder {
	return m.recorder
}

// Compile mocks base method.
func (m *MockCompiler) Compile(script string) (*program.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compile", script)
	ret0, _ := ret[0].(*program.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compile indicates an expected call of Compile.
func (mr *MockCompilerMockRecorder) Compile(script any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compile", reflect.TypeOf((*MockCompiler)(nil).Compile), script)
}
