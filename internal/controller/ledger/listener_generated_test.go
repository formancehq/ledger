// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//	mockgen -write_source_comment=false -write_package_comment=false -source listener.go -destination listener_generated_test.go -package ledger . Listener
//

package ledger

import (
	context "context"
	reflect "reflect"

	metadata "github.com/formancehq/go-libs/v3/metadata"
	ledger "github.com/formancehq/ledger/internal"
	gomock "go.uber.org/mock/gomock"
)

// MockListener is a mock of Listener interface.
type MockListener struct {
	ctrl     *gomock.Controller
	recorder *MockListenerMockRecorder
	isgomock struct{}
}

// MockListenerMockRecorder is the mock recorder for MockListener.
type MockListenerMockRecorder struct {
	mock *MockListener
}

// NewMockListener creates a new mock instance.
func NewMockListener(ctrl *gomock.Controller) *MockListener {
	mock := &MockListener{ctrl: ctrl}
	mock.recorder = &MockListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListener) EXPECT() *MockListenerMockRecorder {
	return m.recorder
}

// CommittedTransactions mocks base method.
func (m *MockListener) CommittedTransactions(ctx context.Context, arg1 string, res ledger.Transaction, accountMetadata ledger.AccountMetadata) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CommittedTransactions", ctx, arg1, res, accountMetadata)
}

// CommittedTransactions indicates an expected call of CommittedTransactions.
func (mr *MockListenerMockRecorder) CommittedTransactions(ctx, arg1, res, accountMetadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommittedTransactions", reflect.TypeOf((*MockListener)(nil).CommittedTransactions), ctx, arg1, res, accountMetadata)
}

// DeletedMetadata mocks base method.
func (m *MockListener) DeletedMetadata(ctx context.Context, arg1, targetType string, targetID any, key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeletedMetadata", ctx, arg1, targetType, targetID, key)
}

// DeletedMetadata indicates an expected call of DeletedMetadata.
func (mr *MockListenerMockRecorder) DeletedMetadata(ctx, arg1, targetType, targetID, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletedMetadata", reflect.TypeOf((*MockListener)(nil).DeletedMetadata), ctx, arg1, targetType, targetID, key)
}

// RevertedTransaction mocks base method.
func (m *MockListener) RevertedTransaction(ctx context.Context, arg1 string, reverted, revert ledger.Transaction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RevertedTransaction", ctx, arg1, reverted, revert)
}

// RevertedTransaction indicates an expected call of RevertedTransaction.
func (mr *MockListenerMockRecorder) RevertedTransaction(ctx, arg1, reverted, revert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertedTransaction", reflect.TypeOf((*MockListener)(nil).RevertedTransaction), ctx, arg1, reverted, revert)
}

// SavedMetadata mocks base method.
func (m *MockListener) SavedMetadata(ctx context.Context, arg1, targetType, id string, arg4 metadata.Metadata) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SavedMetadata", ctx, arg1, targetType, id, arg4)
}

// SavedMetadata indicates an expected call of SavedMetadata.
func (mr *MockListenerMockRecorder) SavedMetadata(ctx, arg1, targetType, id, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavedMetadata", reflect.TypeOf((*MockListener)(nil).SavedMetadata), ctx, arg1, targetType, id, arg4)
}
