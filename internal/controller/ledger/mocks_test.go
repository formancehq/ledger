// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//	mockgen -write_source_comment=false -write_package_comment=false -source ../../storage/common/resource.go -destination mocks_test.go -package ledger . PaginatedResource
//

package ledger

import (
	context "context"
	reflect "reflect"

	bunpaginate "github.com/formancehq/go-libs/v2/bun/bunpaginate"
	common "github.com/formancehq/ledger/internal/storage/common"
	bun "github.com/uptrace/bun"
	gomock "go.uber.org/mock/gomock"
)

// MockPropertyValidator is a mock of PropertyValidator interface.
type MockPropertyValidator struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyValidatorMockRecorder
	isgomock struct{}
}

// MockPropertyValidatorMockRecorder is the mock recorder for MockPropertyValidator.
type MockPropertyValidatorMockRecorder struct {
	mock *MockPropertyValidator
}

// NewMockPropertyValidator creates a new mock instance.
func NewMockPropertyValidator(ctrl *gomock.Controller) *MockPropertyValidator {
	mock := &MockPropertyValidator{ctrl: ctrl}
	mock.recorder = &MockPropertyValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyValidator) EXPECT() *MockPropertyValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockPropertyValidator) Validate(arg0, arg1 string, arg2 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockPropertyValidatorMockRecorder) Validate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockPropertyValidator)(nil).Validate), arg0, arg1, arg2)
}

// MockRepositoryHandler is a mock of RepositoryHandler interface.
type MockRepositoryHandler[Opts any] struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryHandlerMockRecorder[Opts]
	isgomock struct{}
}

// MockRepositoryHandlerMockRecorder is the mock recorder for MockRepositoryHandler.
type MockRepositoryHandlerMockRecorder[Opts any] struct {
	mock *MockRepositoryHandler[Opts]
}

// NewMockRepositoryHandler creates a new mock instance.
func NewMockRepositoryHandler[Opts any](ctrl *gomock.Controller) *MockRepositoryHandler[Opts] {
	mock := &MockRepositoryHandler[Opts]{ctrl: ctrl}
	mock.recorder = &MockRepositoryHandlerMockRecorder[Opts]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryHandler[Opts]) EXPECT() *MockRepositoryHandlerMockRecorder[Opts] {
	return m.recorder
}

// BuildDataset mocks base method.
func (m *MockRepositoryHandler[Opts]) BuildDataset(query common.RepositoryHandlerBuildContext[Opts]) (*bun.SelectQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildDataset", query)
	ret0, _ := ret[0].(*bun.SelectQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildDataset indicates an expected call of BuildDataset.
func (mr *MockRepositoryHandlerMockRecorder[Opts]) BuildDataset(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildDataset", reflect.TypeOf((*MockRepositoryHandler[Opts])(nil).BuildDataset), query)
}

// Expand mocks base method.
func (m *MockRepositoryHandler[Opts]) Expand(query common.ResourceQuery[Opts], property string) (*bun.SelectQuery, *common.JoinCondition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expand", query, property)
	ret0, _ := ret[0].(*bun.SelectQuery)
	ret1, _ := ret[1].(*common.JoinCondition)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Expand indicates an expected call of Expand.
func (mr *MockRepositoryHandlerMockRecorder[Opts]) Expand(query, property any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expand", reflect.TypeOf((*MockRepositoryHandler[Opts])(nil).Expand), query, property)
}

// Filters mocks base method.
func (m *MockRepositoryHandler[Opts]) Filters() []common.Filter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filters")
	ret0, _ := ret[0].([]common.Filter)
	return ret0
}

// Filters indicates an expected call of Filters.
func (mr *MockRepositoryHandlerMockRecorder[Opts]) Filters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filters", reflect.TypeOf((*MockRepositoryHandler[Opts])(nil).Filters))
}

// Project mocks base method.
func (m *MockRepositoryHandler[Opts]) Project(query common.ResourceQuery[Opts], selectQuery *bun.SelectQuery) (*bun.SelectQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Project", query, selectQuery)
	ret0, _ := ret[0].(*bun.SelectQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Project indicates an expected call of Project.
func (mr *MockRepositoryHandlerMockRecorder[Opts]) Project(query, selectQuery any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Project", reflect.TypeOf((*MockRepositoryHandler[Opts])(nil).Project), query, selectQuery)
}

// ResolveFilter mocks base method.
func (m *MockRepositoryHandler[Opts]) ResolveFilter(query common.ResourceQuery[Opts], operator, property string, value any) (string, []any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveFilter", query, operator, property, value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]any)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveFilter indicates an expected call of ResolveFilter.
func (mr *MockRepositoryHandlerMockRecorder[Opts]) ResolveFilter(query, operator, property, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveFilter", reflect.TypeOf((*MockRepositoryHandler[Opts])(nil).ResolveFilter), query, operator, property, value)
}

// MockResource is a mock of Resource interface.
type MockResource[ResourceType any, OptionsType any] struct {
	ctrl     *gomock.Controller
	recorder *MockResourceMockRecorder[ResourceType, OptionsType]
	isgomock struct{}
}

// MockResourceMockRecorder is the mock recorder for MockResource.
type MockResourceMockRecorder[ResourceType any, OptionsType any] struct {
	mock *MockResource[ResourceType, OptionsType]
}

// NewMockResource creates a new mock instance.
func NewMockResource[ResourceType any, OptionsType any](ctrl *gomock.Controller) *MockResource[ResourceType, OptionsType] {
	mock := &MockResource[ResourceType, OptionsType]{ctrl: ctrl}
	mock.recorder = &MockResourceMockRecorder[ResourceType, OptionsType]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResource[ResourceType, OptionsType]) EXPECT() *MockResourceMockRecorder[ResourceType, OptionsType] {
	return m.recorder
}

// Count mocks base method.
func (m *MockResource[ResourceType, OptionsType]) Count(ctx context.Context, query common.ResourceQuery[OptionsType]) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockResourceMockRecorder[ResourceType, OptionsType]) Count(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockResource[ResourceType, OptionsType])(nil).Count), ctx, query)
}

// GetOne mocks base method.
func (m *MockResource[ResourceType, OptionsType]) GetOne(ctx context.Context, query common.ResourceQuery[OptionsType]) (*ResourceType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", ctx, query)
	ret0, _ := ret[0].(*ResourceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockResourceMockRecorder[ResourceType, OptionsType]) GetOne(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockResource[ResourceType, OptionsType])(nil).GetOne), ctx, query)
}

// MockPaginatedResource is a mock of PaginatedResource interface.
type MockPaginatedResource[ResourceType any, OptionsType any, PaginationQueryType common.PaginatedQuery[OptionsType]] struct {
	ctrl     *gomock.Controller
	recorder *MockPaginatedResourceMockRecorder[ResourceType, OptionsType, PaginationQueryType]
	isgomock struct{}
}

// MockPaginatedResourceMockRecorder is the mock recorder for MockPaginatedResource.
type MockPaginatedResourceMockRecorder[ResourceType any, OptionsType any, PaginationQueryType common.PaginatedQuery[OptionsType]] struct {
	mock *MockPaginatedResource[ResourceType, OptionsType, PaginationQueryType]
}

// NewMockPaginatedResource creates a new mock instance.
func NewMockPaginatedResource[ResourceType any, OptionsType any, PaginationQueryType common.PaginatedQuery[OptionsType]](ctrl *gomock.Controller) *MockPaginatedResource[ResourceType, OptionsType, PaginationQueryType] {
	mock := &MockPaginatedResource[ResourceType, OptionsType, PaginationQueryType]{ctrl: ctrl}
	mock.recorder = &MockPaginatedResourceMockRecorder[ResourceType, OptionsType, PaginationQueryType]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaginatedResource[ResourceType, OptionsType, PaginationQueryType]) EXPECT() *MockPaginatedResourceMockRecorder[ResourceType, OptionsType, PaginationQueryType] {
	return m.recorder
}

// Count mocks base method.
func (m *MockPaginatedResource[ResourceType, OptionsType, PaginationQueryType]) Count(ctx context.Context, query common.ResourceQuery[OptionsType]) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockPaginatedResourceMockRecorder[ResourceType, OptionsType, PaginationQueryType]) Count(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockPaginatedResource[ResourceType, OptionsType, PaginationQueryType])(nil).Count), ctx, query)
}

// GetOne mocks base method.
func (m *MockPaginatedResource[ResourceType, OptionsType, PaginationQueryType]) GetOne(ctx context.Context, query common.ResourceQuery[OptionsType]) (*ResourceType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", ctx, query)
	ret0, _ := ret[0].(*ResourceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockPaginatedResourceMockRecorder[ResourceType, OptionsType, PaginationQueryType]) GetOne(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockPaginatedResource[ResourceType, OptionsType, PaginationQueryType])(nil).GetOne), ctx, query)
}

// Paginate mocks base method.
func (m *MockPaginatedResource[ResourceType, OptionsType, PaginationQueryType]) Paginate(ctx context.Context, paginationOptions PaginationQueryType) (*bunpaginate.Cursor[ResourceType], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Paginate", ctx, paginationOptions)
	ret0, _ := ret[0].(*bunpaginate.Cursor[ResourceType])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Paginate indicates an expected call of Paginate.
func (mr *MockPaginatedResourceMockRecorder[ResourceType, OptionsType, PaginationQueryType]) Paginate(ctx, paginationOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paginate", reflect.TypeOf((*MockPaginatedResource[ResourceType, OptionsType, PaginationQueryType])(nil).Paginate), ctx, paginationOptions)
}
