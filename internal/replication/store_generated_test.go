// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//	mockgen -write_source_comment=false -write_package_comment=false -source store.go -destination store_generated_test.go -package replication . StorageDriver
//

package replication

import (
	context "context"
	reflect "reflect"

	bunpaginate "github.com/formancehq/go-libs/v3/bun/bunpaginate"
	ledger "github.com/formancehq/ledger/internal"
	common "github.com/formancehq/ledger/internal/storage/common"
	gomock "go.uber.org/mock/gomock"
)

// MockLogFetcher is a mock of LogFetcher interface.
type MockLogFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockLogFetcherMockRecorder
	isgomock struct{}
}

// MockLogFetcherMockRecorder is the mock recorder for MockLogFetcher.
type MockLogFetcherMockRecorder struct {
	mock *MockLogFetcher
}

// NewMockLogFetcher creates a new mock instance.
func NewMockLogFetcher(ctrl *gomock.Controller) *MockLogFetcher {
	mock := &MockLogFetcher{ctrl: ctrl}
	mock.recorder = &MockLogFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogFetcher) EXPECT() *MockLogFetcherMockRecorder {
	return m.recorder
}

// ListLogs mocks base method.
func (m *MockLogFetcher) ListLogs(ctx context.Context, query common.PaginatedQuery[any]) (*bunpaginate.Cursor[ledger.Log], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogs", ctx, query)
	ret0, _ := ret[0].(*bunpaginate.Cursor[ledger.Log])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogs indicates an expected call of ListLogs.
func (mr *MockLogFetcherMockRecorder) ListLogs(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogs", reflect.TypeOf((*MockLogFetcher)(nil).ListLogs), ctx, query)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateConnector mocks base method.
func (m *MockStorage) CreateConnector(ctx context.Context, connector ledger.Connector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnector", ctx, connector)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConnector indicates an expected call of CreateConnector.
func (mr *MockStorageMockRecorder) CreateConnector(ctx, connector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnector", reflect.TypeOf((*MockStorage)(nil).CreateConnector), ctx, connector)
}

// CreatePipeline mocks base method.
func (m *MockStorage) CreatePipeline(ctx context.Context, pipeline ledger.Pipeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", ctx, pipeline)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePipeline indicates an expected call of CreatePipeline.
func (mr *MockStorageMockRecorder) CreatePipeline(ctx, pipeline any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockStorage)(nil).CreatePipeline), ctx, pipeline)
}

// DeleteConnector mocks base method.
func (m *MockStorage) DeleteConnector(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnector", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConnector indicates an expected call of DeleteConnector.
func (mr *MockStorageMockRecorder) DeleteConnector(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnector", reflect.TypeOf((*MockStorage)(nil).DeleteConnector), ctx, id)
}

// DeletePipeline mocks base method.
func (m *MockStorage) DeletePipeline(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipeline", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePipeline indicates an expected call of DeletePipeline.
func (mr *MockStorageMockRecorder) DeletePipeline(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockStorage)(nil).DeletePipeline), ctx, id)
}

// GetConnector mocks base method.
func (m *MockStorage) GetConnector(ctx context.Context, id string) (*ledger.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnector", ctx, id)
	ret0, _ := ret[0].(*ledger.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnector indicates an expected call of GetConnector.
func (mr *MockStorageMockRecorder) GetConnector(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnector", reflect.TypeOf((*MockStorage)(nil).GetConnector), ctx, id)
}

// GetPipeline mocks base method.
func (m *MockStorage) GetPipeline(ctx context.Context, id string) (*ledger.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipeline", ctx, id)
	ret0, _ := ret[0].(*ledger.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline.
func (mr *MockStorageMockRecorder) GetPipeline(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockStorage)(nil).GetPipeline), ctx, id)
}

// ListConnectors mocks base method.
func (m *MockStorage) ListConnectors(ctx context.Context) (*bunpaginate.Cursor[ledger.Connector], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectors", ctx)
	ret0, _ := ret[0].(*bunpaginate.Cursor[ledger.Connector])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectors indicates an expected call of ListConnectors.
func (mr *MockStorageMockRecorder) ListConnectors(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectors", reflect.TypeOf((*MockStorage)(nil).ListConnectors), ctx)
}

// ListEnabledPipelines mocks base method.
func (m *MockStorage) ListEnabledPipelines(ctx context.Context) ([]ledger.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnabledPipelines", ctx)
	ret0, _ := ret[0].([]ledger.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnabledPipelines indicates an expected call of ListEnabledPipelines.
func (mr *MockStorageMockRecorder) ListEnabledPipelines(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnabledPipelines", reflect.TypeOf((*MockStorage)(nil).ListEnabledPipelines), ctx)
}

// ListPipelines mocks base method.
func (m *MockStorage) ListPipelines(ctx context.Context) (*bunpaginate.Cursor[ledger.Pipeline], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelines", ctx)
	ret0, _ := ret[0].(*bunpaginate.Cursor[ledger.Pipeline])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelines indicates an expected call of ListPipelines.
func (mr *MockStorageMockRecorder) ListPipelines(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelines", reflect.TypeOf((*MockStorage)(nil).ListPipelines), ctx)
}

// OpenLedger mocks base method.
func (m *MockStorage) OpenLedger(arg0 context.Context, arg1 string) (LogFetcher, *ledger.Ledger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenLedger", arg0, arg1)
	ret0, _ := ret[0].(LogFetcher)
	ret1, _ := ret[1].(*ledger.Ledger)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OpenLedger indicates an expected call of OpenLedger.
func (mr *MockStorageMockRecorder) OpenLedger(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenLedger", reflect.TypeOf((*MockStorage)(nil).OpenLedger), arg0, arg1)
}

// StorePipelineState mocks base method.
func (m *MockStorage) StorePipelineState(ctx context.Context, id string, lastLogID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePipelineState", ctx, id, lastLogID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorePipelineState indicates an expected call of StorePipelineState.
func (mr *MockStorageMockRecorder) StorePipelineState(ctx, id, lastLogID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePipelineState", reflect.TypeOf((*MockStorage)(nil).StorePipelineState), ctx, id, lastLogID)
}

// UpdatePipeline mocks base method.
func (m *MockStorage) UpdatePipeline(ctx context.Context, id string, o map[string]any) (*ledger.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePipeline", ctx, id, o)
	ret0, _ := ret[0].(*ledger.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePipeline indicates an expected call of UpdatePipeline.
func (mr *MockStorageMockRecorder) UpdatePipeline(ctx, id, o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipeline", reflect.TypeOf((*MockStorage)(nil).UpdatePipeline), ctx, id, o)
}
